# -----------------
# DOCKUI plugin.yml Reference
# -----------------
# Description: This reference plugin.yml file has examples an explanations of every module type understood by the framework.
#
# Attributes:
#   name: Human readable Name for this Plugin
#   url: Remote location of this Descriptor
#        - Only used if not yet known. I.e. because you manually installed the plugin from its descriptor file
#        - if loaded from Docker events this would already be known thus not used.
#   key: Unique key for this Plugin
#   version: version of this Plugin
#   descriptor-version: version of the Plugin Descriptor this Plugin is targeting.
#   icon: A Plugin local url pointing to an Icon for use with this Plugin
#   lifecycle.installed: This is called syncronously with security context upon install of the Plugin
#
#      - endpoint should reply with 200 OK or install will fail.
#      - Security context payload contains
#       {
#         "key": "key-from-your-descriptor",
#         "uuid": "unique-identifier-of-your-plugin",
#         "secret": "a-secret-used-for-jwt-signing-etc",
#         "url": "https://base.url.of.the.calling.framework.instance"
#       }
#   authentication.type: mechanism used by plugin to authenticate with framework.
name: "DockUI Demo Plugin"
url: "https://dockui.demo/plugin"
key: "dockui-demo-unique-plugin-key"
description: "This is a demo Plugin showing of the various features of the DockUI framework"
version: 1.0.0
descriptor-version: 1.0.0
icon: '/static/dockui-logo.png'
lifecycle: 
  installed: "/installed"
authentication:
   - type: "jwt"

# Modules describe the features of the plugin. See the various types for explanation of what they do
modules:

  # -----------------
  # Common Attributes
  # -----------------
  # type: the Module type defines the loader to use
  # name: A Human readable name for the Module
  # key: A Plugin unique key for the Module
  # weight: The order in which the module is inserted or invoked.

  # -----------------
  # Caching Attributes
  # -----------------
  # cache:
  #   policy: (none or keep) Whether to cache this module provided resource or not
  #   expire: (0=never) If caching how long till we expire the cache in MS
  
  # -----------------
  # Security Attributes
  # -----------------
  # roles: A List of the roles that are required by this module. They can be anything so long as one of the 
  #        AuthorizationProviders can recognise and handle it.

  # -----------------
  # Route
  # -----------------
  # Description: Routes are a way to generate prettier urls for a given webpage or api request
  #
  # Examples: 
  #   using the below config a call would be mapped from 
  #     from /example?demo#bla
  #     to   /plugins/example-plugin-key/modules/example-webpage?demo#bla
  #
  # Attributes:
  #   routes : a list of Regular expressions to map to module URLs
  #   url: The real URL to route transform the requests to

    - type : "Route"
      name: "Example Route"
      key: "example-route"
      routes:
        - "/example*"
      url: "/plugins/example-plugin-key/modules/example-webpage$1"

  # -----------------
  # AuthenticationProvider
  # -----------------
  # Description:   Authentication providers provide capabilities to verify the identify of a logged in user based on the
  #                current session ( URL + headers )
  #
  # Examples: 
  #  - Providers are chained (weight represents order this will be called)
  #  - Providers must authenticate a user, send error, send redirect or pass to next provider
  #
  #   Providers are sent a JSON with:
  # 
  #   {
  #     url: "/relative/url/being/requested?withParams#etc",
  #     headers: [All Headers]
  #   }
  # 
  #   They should respond with one of:
  # 
  #   HTTP 200 (Successfully Handled this request)
  #   {
  #     action: "allow"||"deny:<msg>"||"redirect:<url>",
  #     principle: {
  #       type: <user|service>
  #       userId: <uniqueId>,
  #       ,,,<otherDecoratedUserData>
  #     },
  #     setHeaders: [
  #       { name: "customAuthCookie", value: "customAuthVal" }
  #     ]
  #   }
  #
  #   HTTP 422 "Unprocessable Entity" (Provider cannot process this request so pass to next provider)
  #
  # Attributes:
  #   url : A relative Plugin served endpoint tthat the framework will make authentication requests to


    - type : "AuthenticationProvider"
      name: "Authentication Provider"
      key: "example-authentication-provider"
      url: "/authenticate"
      cache:
        policy: "none"
      weight: 1

  # -----------------
  # AuthorizationProvider
  # -----------------
  # Description:   Authorization Providers provide the ability to check if a principle (user,app etc) has required Roles
  #
  # Examples:   
  #   - Providers are chained (weight represents order this will be called)
  #   - All Providers will be called in order. Result can be cached based on define policy
  #   - Authorization providers are sent the following json:
  #
  #   {      
  #       id: <userId>,
  #       timestamp: <datetime>,
  #       required: ["EVERYONE", "GLOBAL_ADMIN"]
  #   }
  # 
  #     and are expected to reply with:
  #
  #   {
  #       id: <userId>,
  #       timestamp: <datetime>,
  #       roles: [
  #         {"EVERYONE": "true"},
  #         {"GLOBAL_ADMIN": "false"},
  #       ],
  #       hasAllRequiredRoles: "false"
  #    }
  #
  # Attributes:
  #   url : A relative Plugin served endpoint tthat the framework will make authorization requests to

    - type : "AuthorizationProvider"
      name: "Example Authorization Provider"
      key: "example-authorization-provider"
      url: "/authorize"
      weight: 5
      cache:
        policy: keep
        expire: 6000

  # -----------------
  # Webitem
  # -----------------
  # Description:  Webitems are links that will be inserted into all WebPages that define the specified location
  #
  # Attributes:
  #   url : A relative (to the framework) or absolute URL
  #   text : Human readable Link text 
  #   location : Where this Webitem will be injected into
  #   tooltip : Hint about what the webitem link is for

    - type : "webitem"
      name: "Example Webitem"
      key: "example-webitem"
      url: "/example/relative/url"
      text: "Example Webitem"
      location: "example.home.header.links"
      tooltip: "This is a Tooltip (Hint)"
      cache:
        policy: "keep"
        expire: 0
      weight: 10

  # -----------------
  # Webfragment
  # -----------------
  # Description: Webfragments are html partials which will be injected into all WebPages that define the specified location
  #
  # Examples: 
  #
  #   <div data-webfragments="example.home.footer">The fragment defined below would be injected here!!</div>
  #
  # Attributes:
  #   url : local Url to the fragment HTMl page served from the Plugin
  #   selector: A css selector to isolate the fragment from an existing page ( Useful for testing fragments in isolation )
  #   location: This fragment will be injected into any Webpage that specifies the location 

    - type : "webfragment"
      name : "Example fragment"
      key : "example-fragment"
      url : "/fragments/example.html"
      selector : "#example-fragment-selector"
      location: "example.home.footer"
      cache:
        policy: "keep"
        expire: 0
      roles:
        - "EVERYONE"
      weight : 10

  # -----------------
  # Webresource
  # -----------------
  # Description:  define static resources that you can inject into any webpage which includes a 'resources' metatag.
  #
  # Attributes:
  #   url : base url for all defined resources
  #   resources: a list of resource objects comprising:
  #     type: the type of the resource currently only one of "js" or "css"
  #     url: the relative url of the resource (relative to the modules url)
  #   context: WebPage(s) to inject the resources into (Provided by WebPages using "resources" metatag).

    - type : "webresource"
      name : "Example webresource"
      key : "example-webresource"
      url : "/static"
      resources :
        - type: "js"
          path : "js/example.javascript.js"
        - type: "css"
          path : "css/example.style.css"
      context : "example.resources.context"
      cache:
        policy: "keep"
        expire: 0
      roles:
        - "UNAUTHENTICATED"
        - "EVERYONE"

  # -----------------
  # Webpage
  # -----------------
  # Description:  Entire served html pages, statically or dynamically generated by the Plugin.
  #
  # Example:
  #   Within the HTML page you can define the following:
  #     - Decorator: add a "decorator" metatag to wrap the page with the specified WebPage module before render
  #     - Resources: use the "resources" metatag to have the framework inject static resources from all WebResource
  #          modules that target the specified context 
  #     - Webitem: add "data-webitems" attribute to any dom element to have webitems injected from any Webitem module 
  #          which targets the defined location. The innerHTML is used as the template for the WebItem e.g.:
  #          <li data-webitems="app.home.header.primary.dropdown.webitems" tabindex="-1">
  #            <a href="{{webitem.link}}">{{webitem.text}}</a>
  #          </li>
  #     - Webfragment: add "data-webfragments" attribute to any dom element to have webfragments injected from any Webfragment module
  #           which targets the defined location. The innerHTML will be replaced with all fragments e.g.:
  #           <div data-webfragments="app.home.header"></div>
  #
  # Attributes:
  #   url: local relative url of the WebPage served by the Plugin

    - type : "webpage"
      name : "Example Webpage"
      key : "example-webpage"
      url : "/pages/example.html"
      cache:
        policy: "none"
      roles:
        - "UNAUTHENTICATED"
        - "EVERYONE"

  # -----------------
  # API
  # -----------------
  # Description:  define a proxy from the main API gateway to a custom API endpoint
  #  - typically used to proxy REST or Graphql APIs
  #
  # Example:
  #  The below config would proxy 
  #       from: <host>/api/dockui-demo-unique-plugin-key/example-rest-api-endpoint/special/api
  #       to:   <plugin>/rest/api/1.0/special/api
  #
  # Attributes:
  #   version: version of the API being served. Allows you to serve newer versions in tandom for Beta testing etc
  #   url: local baseUrl of the API being proxied to.

    - type : "api"
      name : "Example API"
      key : "example-rest-api-endpoint"
      version : "1.0"
      url : "/rest/api/1.0/"
      cache:
        policy: "keep"
        expire: 6000
      roles:
        - "EVERYONE"

  # -----------------
  # Webhook
  # -----------------
  # Description: provide the ability to asyncronously participate in framework events remotely
  #
  # Attributes:
  #   url: local endpoint to receive the event payload
  #   events: list of events we want to be notified about

    - type : "webhook"
      name: "Webhook"
      key: "example-webhook"
      url: "/hook"
      events: 
        - "plugin:enabled"