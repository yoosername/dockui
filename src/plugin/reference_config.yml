# Here you specify a name, key and version of your plugin(micro-app) which is used
# by the PluginService to instantiate a unique versioned Plugin at runtime
# plugins have following states (loaded,failed,enabled,disabled)
# name: Human readable Name for this Plugin
# url: Remote location of this Descriptor
#      - Only used if not yet known. I.e. because you manually installed the plugin from its descriptor file
#      - if loaded from Docker events this would already be known thus not used.
# key: Unique key for this Plugin
# version: version of this Plugin
# descriptor-version: version of the Plugin Descriptor this Plugin is targeting.
# icon: A local url pointing to an Icon for use with this Plugin
# lifecycle:
#     installed: This is called syncronously with security context
#      - endpoint should reply with 200 OK or install will fail.
#      - Security context payload contains
        # {
        #   "key": "key-from-your-descriptor",
        #   "uuid": "unique-identifier-of-your-plugin",
        #   "secret": "a-secret-used-for-jwt-signing-etc",
        #   "url": "http://url.of.the.calling.framework.instance"
        # }
name: "DockUI Demo Plugin"
url: "https://dockui.demo/plugin"
key: "dockui-demo-unique-plugin-key"
description: "This is a demo Plugin showing of the various features of the DockUI framework"
version: 1.0.0
descriptor-version: 1.0.0
icon: '/static/dockui-logo.png'
lifecycle: 
  installed: "/installed"
authentication:
   - type: "jwt"

# Modules describe the features of the plugin. See the various types for explanation of what they do
modules:

  # Routes are a way to use more readable urls for a given webpage or resource
  # using the below a call to /example?demo would be translated to
  # "/plugins/example-plugin-key/modules/example-webpage?demo"
    - type : "route"
      name: "Example Route"
      key: "example-route"
      routes:
        - "/example*"
      path: "/plugins/example-plugin-key/modules/example-webpage$1"

  # Auth providers provide capabilities to verify the identify of a logged in user
  # or present some auth challenge to the user.
  # Providers are chained (weight represents order this will be called)
  # Providers can authenticate a user, send error, send redirect or pass to next provider
  # Providers are sent a JSON with:
  # {
  #   url: "String of url that was requested",
  #   headers: [All Headers]
  # }
  # They should respond with json containing:
  # {
  #   authenticated: true||false,
  #   action: "pass"||"allow"||"deny:<http_code>"||"redirect:<url>",
  #   user: {
  #     id: <uniqueId>
  #   },
  #   setHeaders: [
  #     { name: "customAuthCookie", value: "customAuthVal" }
  #   ]
  # }
    - type : "authenticationprovider"
      name: "Authentication Provider"
      key: "example-authentication-provider"
      authenticateUrl: "/authenticate"
      weight: 1

  # Authorization providers provide capabilities to check if principle (user,app) has required Roles
  # Providers are chained (weight represents order this will be called)
  # All Providers will be called in order. Result can be cached
  # Authorization providers are sent the following json:
  # principle: {
  #     id: <uuid>,
  #     type: "user"||"app"  
  # }
  # and are expected to decorate the principle with roles in response e.g.
  # principle: {
  #     id: <uuid>,
  #     type: "user"||"app",
  #     roles: [
  #       EVERYONE,
  #       GLOBAL_ADMIN,
  #     ]
  # }
    - type : "authorizationprovider"
      name: "Example Authorization Provider"
      key: "example-authorization-provider"
      scopeLookupUrl: "/roles"
      weight: 5
      cache:
        policy: keep
        ttl: 6000ms

  # Webitems are links that you can insert in various places in the webapp
  # Locations are defined within the html templates themselves
    - type : "webitem"
      name: "Example Webitem"
      key: "example-webitem"
      link: "/example/relative/url"
      location: "example.home.header.links"
      tooltip: "This is a Tooltip"
      weight: 10
      text: "Example Webitem"

  # Webfragments are html partials which will be injected into the specified location
  # for example to show a component on an existing web page
  # the path is to the served html template, and the fragment is a CSS selector for a single element to
  # isolate from said template and use as the actual fragment for this module
    - type : "webfragment"
      name : "Example fragment"
      key : "example-fragment"
      path : "/fragments/example.html"
      fragment : "#example-fragment-selector"
      location: "example.home.footer"
      cache:
        policy: keep
        ttl: *
      roles:
        - "EVERYONE"
      weight : 10

  # Webpages are entire served html pages
  #   - Within the HTML you can define a decorator meta tag to cause the page to be decorated before serving
  #       - The decorator can be provided by this plugin or any other plugin
  #   - Within the HTML you can define a resourcesFor meta tag to have static resources injected
  #       - Static resources can be provided by this plugin or another plugin
    - type : "webpage"
      name : "Example Webpage"
      key : "example-webpage"
      path : "/pages/example.html"
      cache:
        policy: refresh
      roles:
        - "UNAUTHENTICATED"
        - "EVERYONE"

  # REST modules define a single base URL to directly proxy requests to from the main api gateway
    - type : "rest"
      name : "Example Rest API"
      key : "example-rest-api-endpoint"
      version : "1.0"
      base : "/rest/api/1.0/"
      cache:
        policy: keep
        ttl: 6000ms
      roles:
        - "EVERYONE"

  # Web resources define static resources that you can inject into any webpage
  # that provides a 'resourcesFor' context location meta tag.
    - type : "webresource"
      name : "Example webresource"
      key : "example-webresource"
      base : "/static"
      resources :
        - type: "js"
          path : "example.javascript.js"
        - type: "css"
          path : "example.style.css"
      context : "example.resources.context"
      cache:
        policy: keep
        ttl: 6000ms
      roles:
        - "UNAUTHENTICATED"
        - "EVERYONE"

  # webhooks provide the ability to asynconrously participate in framework events remotely
  # events: list of events that should be POST'd to this endpoint
  # url: endpoint to receive the event payload
    - type : "webhook"
      name: "Webhook"
      events: 
        - "plugin:enabled"
      key: "example-webhook"
      url: "/hook"