key: dockui.dashboard.app
alias: dashboard
name: DockUI Dashboard App
baseUrl: http://localhost:8080/demo
type: dynamic
description: This is a demo Dashboard App showing of the various features of the DockUI framework
version: 1.0.0
descriptorVersion: 1.0.0
icon: "/static/images/logo.png"
lifecycle:
  - loaded: /loaded
authentication:
  - type: jwt
modules:
  # Provides:
  #   Routing at the base level for prettier URLs
  - type: Route
    name: Dashboard App Routes
    key: dockui.routes.common
    routes:
      - from: ^/$
        to: /app/dashboard/index
      - from: ^/login([?]{0,1}[^?]*)$
        to: /app/dashboard/login$1
    weight: 0

  #   This route wont take effect because the one above
  #   Also matches and is a lower weight
  - type: Route
    name: Dashboard App Routes override
    key: dockui.routes.override
    routes:
      - from: ^/$
        to: /app/bongo
    weight: 1
  # # Provides:
  # #   Store of user ids with attached profile info ( e.g. username, password hash, fullname etc )
  # - type: UserDirectory
  #   name: Simple File Based User DB
  #   key: dockui.directory.users.fileDB
  #   url: /users
  #   weight: 1

  # Provides:
  #   Identification checking for existing sessions
  #     (e.g. if creds in header, return a real user object from some userDB)
  #   Authentication flow for unidentified users
  #     (e.g. if no creds in header or creds wrong, send 501 or 301 request redirect to login page (provided elsewhere)
  - type: AuthenticationProvider
    name: Form Auth Provider
    key: dockui.dashboard.auth.form
    url: /identity_check
    weight: 0

  # Provides:
  #   Check that the logged in Principle (user/service) has access to the requested resource
  #     - if user is known and access granted return 200
  #     - if user is known but access is not granted return 401
  #     - if user is not known return 501 Not Implemented
  - type: AuthorizationProvider
    name: Simple Role Based Permissions service
    key: dockui.dashboard.permissions
    url: /permission_check
    weight: 0

    # Inject single Link (cached forever until module disabled/unloaded)
  - type: WebItem
    name: Link to disabled Page
    key: dockui.dashboard.links.disabledPageLink
    url: /app/dashboard/disabled
    text: Goto Disabled Page
    location: dockui.dashboard.index.header.links
    tooltip: This is a Tooltip (Hint)
    weight: 10
    cache:
      enabled: true

    # Inject Page fragment
  - type: WebFragment
    name: Dashboard Widget
    key: dockui.dashboard.fragments.widget
    url: /fragments/widget.html
    selector: "#fragment-selector"
    location: dashboard.home.main
    weight: 10
    cache:
      enabled: true
      ttl: 60000ms

  # WebResource
  #
  # Serve Static Resources & inject at existing page location
  # Within the HTML of a WebPage you can specify either meta tags in the HEAD like this:
  #
  #   <meta name="WebResourcesFor" content="link,style" />
  #
  # or as data attribute on a div in the body like this (note inside the brackets are any modifiers):
  #
  #   <div data-WebResourcesFor="script[inline]">
  #      All WebResource(s) targeting this page (or that are targetting a page decorated by this page)
  #      of types <script> will be injected here
  #   </div>
  #
  # In both cases the value is a comma seperated list of any of 3 types that could be injected from [link,style,script]
  #
  # The "context" refers to the WebPage module key that we want the resources injected into
  - type: WebResource
    name: Dashboard Static Resources
    key: dockui.dashboard.resources
    aliases:
      - s
    url: /static
    resources:
      - type: js
        path: lib/jquery/jquery-3.3.1.slim.min.js
      - type: js
        path: lib/popper/popper-1.14.7.min.js
      - type: js
        path: lib/bootstrap/js/bootstrap-4.3.1.min.js
      - type: css
        path: lib/bootstrap/css/bootstrap-4.3.1.min.css
      - type: css
        path: lib/fontawesome/css/fontawesome-5.9.0.min.css
      - type: static
        path: lib/fontawesome/webfonts
      - type: js
        path: js/example.javascript.js
        modifier:
          - inline
      - type: css
        path: css/example.style.css
        modifier:
          - inline
    context: dockui.dashboard
    weight: 100
    cache:
      enabled: true
      ttl: 600000ms

    # A Common Decorator WebPage (Site Header)
  - type: WebPage
    name: Dashboard Site Decorator
    key: dockui.dashboard.decorator
    url: /pages/decorator.html
    enabled: true

    # Serve Web Page (optionally decorated by another page)
  - type: WebPage
    name: Dashboard Home
    key: dockui.dashboard
    # Aliases are relative to the App root e.g. <scheme>://<host>/app/<appAlias>/<moduleAlias>
    # and act as a full replacement for the default which is the key of the module
    # note: a Module alias of index will resolve to / or ""
    aliases:
      - index
      - index.html
    url: /pages/home.html
    caching:
      enabled: true
      ttl: 2000ms
    # If a decorator is specified then this page will be injected into its HTML at the first "data-content"
    decorator: dockui.dashboard.decorator
    # This dictates the startup behaviour only (i.e. what to do the first time the App is loaded)
    enabled: true

    # Serve Web Page (optionally decorated by another page)
  - type: WebPage
    name: Dashboard App Admin
    key: dockui.dashboard.admin.app
    aliases:
      - manage
    url: /pages/manage.html
    caching:
      enabled: true
      ttl: 2000ms
    # If a decorator is specified then this page will be injected into its HTML at the first "data-content"
    decorator: dockui.dashboard.admin.decorator
    auth:
      - type: role
        role: DASHBOARD_VIEW
        action:
          - GET
      - type: role
        role: DASHBOARD_ADMIN
        action:
          - POST
          - PUT
          - DELETE
    # This dictates the startup behaviour only (i.e. what to do the first time the App is loaded)
    enabled: true

  - type: WebPage
    name: Admin Wrapper
    key: dockui.dashboard.admin.decorator
    url: /pages/admin.html
    decorator: dockui.dashboard.decorator
    enabled: true

  - type: WebPage
    name: Example Login page for our authProvider above
    key: dockui.dashboard.login
    url: /pages/login.html
    aliases:
      - login
    enabled: true

    # Proxy request directly to an existing API
  - type: Api
    name: Dashboard Backend
    key: dockui.dashboard.api
    aliases:
      - api/users # /app/dashboard/api/users
    version: 1.0
    url: /rest/api/1.0/users
    caching:
      enabled: true
      ttl: 60000ms
    auth:
      - type: role
        role: DASHBOARD_VIEW
        action:
          - GET
      - type: role
        role: DASHBOARD_ADMIN
        action:
          - POST
          - PUT
          - DELETE

    # Receive POST request on given framework events
  - type: Webhook
    name: Dashboard Webhook
    key: dockui.dashboard.webhook
    url: /hook
    events:
      - app:enabled
